name: CI
on:
  - push
  - pull_request

jobs:
  build:
    name: Build for ${{ matrix.device }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        device:
          #- libreComputer-amlS805xAc
          #- libreComputer-rocRk3399Pc
          #- libreComputer-rocRk3399PcMezzanine
          #- odroid-C2
          #- odroid-C4
          #- odroid-N2
          #- olimex-teresI
          #- orangePi-pc
          #- orangePi-zeroPlus2H5
          #- pine64-pineA64
          #- pine64-pineA64LTS
          #- pine64-pinebookA64
          #- pine64-pinebookPro
          #- pine64-pinephoneA64
          #- pine64-pinephonePro
          - pine64-rockpro64
          - radxa-RockPi4
          #- radxa-RockPi4C
          #- radxa-zero2
          #- raspberryPi-aarch64
    steps:
      - uses: actions/checkout@v3

      - name: Cache nix store
        uses: actions/cache@v3
        with:
          key: nix-${{ github.sha }}
          restore-keys: nix-
          path: .cache/nix

      - name: Restore cached nix store
        run: |
          # actions/cache runs as an unprivileged user, so it's unable to write
          # to /. Thus we move the cached paths to .cache/nix before saving the
          # cache to be able to restore it.
          if [ -e .cache/nix ]; then
            rm -rf /nix/store /nix/var/nix/db/db.sqlite
            mkdir -p /nix/var/nix/db
            mv .cache/nix/store /nix/
            mv .cache/nix/db.sqlite /nix/var/nix/db/
            chmod 1775 /nix/store
            chmod 0644 /nix/var/nix/db/db.sqlite
            chown -R root:root /nix/store /nix/var/nix/db/db.sqlite
          fi
        shell: sudo sh {0}

      - name: Install nix
        uses: cachix/install-nix-action@v17
        with:
          extra_nix_config: |
            # Save space on disk and in cache.
            auto-optimise-store = true
            # Keep all store paths necessary to build the outputs.
            keep-outputs = true
            keep-derivations = true

      - name: Build images
        id: images
        run: |
          nix-build -A ${{ matrix.device }}
          echo "::set-output name=result::$(readlink -f result)"

      # XXX: Artifacts are built for each push and pull request, so better to
      # keep them small, otherwise we would run out of space on GitHub quickly.
      - name: Remove unnecessary files
        if: "!startsWith(github.ref, 'refs/tags/v')"  # if not release
        run: sudo rm -rf result/{binaries,config,source}

      - name: Build archive
        id: archive
        run: |
          nix-build -A ${{ matrix.device }}.build.archive
          echo "::set-output name=result::$(readlink -f result)"

      - name: Rename archive
        run: |
          archive=$(readlink -f result)
          cp -L "$archive" "${archive#*-}"

      - name: Upload archive to Artifacts
        uses: actions/upload-artifact@v3
        with:
          path: '*.tar.xz'
          if-no-files-found: error

      - name: Prepare nix store for caching
        run: |
          rm -f result
          # We have manually removed some files from the images result, so it
          # should not be cached. Moreover, we share the cache between jobs, so
          # it wouldn't make much sense to keep them.
          nix-store --delete ${{ steps.images.outputs.result }} ${{ steps.archive.outputs.result }}
          systemctl stop nix-daemon
          mkdir -p .cache/nix
          mv /nix/store /nix/var/nix/db/db.sqlite .cache/nix/
        shell: sudo sh {0}

  release:
    name: Release
    if: startsWith(github.ref, 'refs/tags/v') && github.event_name != 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download archives from Artifacts
        uses: actions/download-artifact@v3
        with:
          path: archives/

      - name: Generate checksums.txt
        run: shasum -a 256 * > checksums.txt
        working-directory: archives

      - name: Upload archives to Releases
        uses: softprops/action-gh-release@v1
        with:
          files: archives/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
